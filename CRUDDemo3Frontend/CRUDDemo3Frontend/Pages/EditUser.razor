@page "/EditUser/{Id:int}"
@inject NavigationManager NavigationManager
@using CRUDDemo3Frontend.Model
@using CRUDDemo3Frontend.Service;
@inject IUserService userService;

<h3>EditUser</h3>

<EditForm Model="@user" OnValidSubmit="UpdateUser">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Full Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.FullName" />
        </div>
        <ValidationMessage For="@(() => user.FullName)" />
    </div>
    <div class="mb=3">
        <label class="form-label">Email Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.EmailAddress" />
        </div>
        <ValidationMessage For="@(()=> user.EmailAddress)" />
    </div>
    <div class="mb=3">
        <label class="form-label">UserID</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.UserID" />
        </div>
        <ValidationMessage For="@(()=> user.UserID)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Password</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Password" />
        </div>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" />
    </div>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }
    User user = new User();
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user1 = (await AuthStat).User;
        if (!user1.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Login");
        }
        user = await userService.GetUser(Convert.ToInt32(Id));
    }
    protected async Task UpdateUser()
    {
        await userService.UpdateUser(user);
        NavigationManager.NavigateTo("/");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
